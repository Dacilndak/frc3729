<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.3">
  <compounddef id="_axis_camera_8cpp" kind="file">
    <compoundname>AxisCamera.cpp</compoundname>
    <includes local="no">string.h</includes>
    <includes local="yes">Synchronized.h</includes>
    <includes local="yes">Vision/AxisCamera.h</includes>
    <includes local="yes">Vision/PCVideoServer.h</includes>
    <incdepgraph>
      <node id="26">
        <label>Vision/AxisCamera.h</label>
      </node>
      <node id="25">
        <label>Synchronized.h</label>
      </node>
      <node id="27">
        <label>Vision/PCVideoServer.h</label>
      </node>
      <node id="24">
        <label>string.h</label>
      </node>
      <node id="23">
        <label>AxisCamera.cpp</label>
        <link refid="AxisCamera.cpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_axis_camera_8cpp_1ab13f1e7df92dd9fac9062be70e8584b9" prot="public" static="no">
        <name>kMaxPacketSize</name>
        <initializer>1536</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="32" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_axis_camera_8cpp_1a6b06f9a0fb4fbd5003bd5b8da9e0f877" prot="public" static="no">
        <name>kImageBufferAllocationIncrement</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="33" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_axis_camera_8cpp_1aa3b2efb1b6e050331e44cfaf0c7ba43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMAQ_FUNC int</type>
        <definition>IMAQ_FUNC int Priv_ReadJPEGString_C</definition>
        <argsstring>(Image *_image, const unsigned char *_string, UINT32 _stringLength)</argsstring>
        <name>Priv_ReadJPEGString_C</name>
        <param>
          <type>Image *</type>
          <declname>_image</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>_string</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>_stringLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="29"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1ac5e2f623d5c21d4df91943d7393bdecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraStart</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="366" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1aa55b277d90f20c96a1628f1b3226e89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AxisCameraGetImage</definition>
        <argsstring>(Image *image)</argsstring>
        <name>AxisCameraGetImage</name>
        <param>
          <type>Image *</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="372" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a18a544fa9b0112b0ffebf8437a21953f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteBrightness</definition>
        <argsstring>(int brightness)</argsstring>
        <name>AxisCameraWriteBrightness</name>
        <param>
          <type>int</type>
          <declname>brightness</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="378" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1ad99b34fc089f0993088714dbc47dfca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AxisCameraGetBrightness</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetBrightness</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="384" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a8fc3732fd0bfd18ba629b509b9f2087f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteWhiteBalance</definition>
        <argsstring>(AxisCameraParams::WhiteBalance_t whiteBalance)</argsstring>
        <name>AxisCameraWriteWhiteBalance</name>
        <param>
          <type>AxisCameraParams::WhiteBalance_t</type>
          <declname>whiteBalance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="390" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a42dba9665ec543032ec0fa4ab0aa642b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AxisCameraParams::WhiteBalance_t</type>
        <definition>AxisCameraParams::WhiteBalance_t AxisCameraGetWhiteBalance</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetWhiteBalance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="396" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1ae7a3a2d2c5be64c171cf3688b6606491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteColorLevel</definition>
        <argsstring>(int colorLevel)</argsstring>
        <name>AxisCameraWriteColorLevel</name>
        <param>
          <type>int</type>
          <declname>colorLevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="402" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1af58ba42708392b2e7f30cf78c3473f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AxisCameraGetColorLevel</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetColorLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="408" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a75bc50244e8564c37c49831eda9a17ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteExposureControl</definition>
        <argsstring>(AxisCameraParams::Exposure_t exposure)</argsstring>
        <name>AxisCameraWriteExposureControl</name>
        <param>
          <type>AxisCameraParams::Exposure_t</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="414" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="413" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1aa969289b2433fc0fd71058065d7de1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AxisCameraParams::Exposure_t</type>
        <definition>AxisCameraParams::Exposure_t AxisCameraGetExposureControl</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetExposureControl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="420" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a3790d2940e7f02c8b362f136cc73f65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteExposurePriority</definition>
        <argsstring>(int exposure)</argsstring>
        <name>AxisCameraWriteExposurePriority</name>
        <param>
          <type>int</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="426" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="425" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a36a33c58699aa9d068c1456da2722c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AxisCameraGetExposurePriority</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetExposurePriority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="432" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="431" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a4e0d492753e77cb8b2e40507dbdf7ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteMaxFPS</definition>
        <argsstring>(int maxFPS)</argsstring>
        <name>AxisCameraWriteMaxFPS</name>
        <param>
          <type>int</type>
          <declname>maxFPS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="438" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1afcd2c02aad6ad2126c2675d85e887346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AxisCameraGetMaxFPS</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetMaxFPS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="444" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a6ddc4460d341196a29d9057c687e0f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteResolution</definition>
        <argsstring>(AxisCameraParams::Resolution_t resolution)</argsstring>
        <name>AxisCameraWriteResolution</name>
        <param>
          <type>AxisCameraParams::Resolution_t</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="450" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1acda823667aa84deb5767878102621d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AxisCameraParams::Resolution_t</type>
        <definition>AxisCameraParams::Resolution_t AxisCameraGetResolution</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetResolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="456" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a376971e0aa3f75daf0eeb6c99b13b2e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteCompression</definition>
        <argsstring>(int compression)</argsstring>
        <name>AxisCameraWriteCompression</name>
        <param>
          <type>int</type>
          <declname>compression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="462" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="461" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a097c697a9aa564643d00255483548183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AxisCameraGetCompression</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetCompression</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="468" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a679ea5e7b9dff60ac1fca70405eb7dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraWriteRotation</definition>
        <argsstring>(AxisCameraParams::Rotation_t rotation)</argsstring>
        <name>AxisCameraWriteRotation</name>
        <param>
          <type>AxisCameraParams::Rotation_t</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="474" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a4db0cf6684ff51e0e99b9a2372dacbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AxisCameraParams::Rotation_t</type>
        <definition>AxisCameraParams::Rotation_t AxisCameraGetRotation</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraGetRotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="480" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1abeaa5910fe8777d7910f20ee59e142ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AxisCameraDeleteInstance</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraDeleteInstance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="486" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="485" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="_axis_camera_8cpp_1a7fc9397ffa026df80ef29f323b6c682f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AxisCameraFreshImage</definition>
        <argsstring>()</argsstring>
        <name>AxisCameraFreshImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" line="492" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp" bodystart="491" bodyend="494"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File patching buggy code for the AxisCamera class that causes the robot to freeze. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>FIRST people, Joe Hurler </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>RJFRC<sp/>-<sp/>The<sp/>code<sp/>used<sp/>by<sp/>Regis<sp/>Jesuit<sp/>High<sp/>School&apos;s<sp/>FIRST<sp/>Robotics<sp/>Competition<sp/>team<sp/>#3729<sp/>over<sp/>the<sp/>years,<sp/>starting<sp/>from<sp/>2011<sp/>(rookie<sp/>year).</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>Copyright<sp/>(C)<sp/>2011<sp/>Regis<sp/>Jesuit<sp/>High<sp/>School</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>FIRST<sp/>2008.<sp/>All<sp/>Rights<sp/>Reserved.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Open<sp/>Source<sp/>Software<sp/>-<sp/>may<sp/>be<sp/>modified<sp/>and<sp/>shared<sp/>by<sp/>FRC<sp/>teams.<sp/>The<sp/>code<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>accompanied<sp/>by<sp/>the<sp/>FIRST<sp/>BSD<sp/>license<sp/>file<sp/>in<sp/>$(WIND_BASE)/WPILib.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Synchronized.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vision/AxisCamera.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vision/PCVideoServer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>NI<sp/>function<sp/>to<sp/>decode<sp/>JPEG<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">IMAQ_FUNC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Priv_ReadJPEGString_C(Image*<sp/>_image,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_string,<sp/>UINT32<sp/>_stringLength);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>packet<sp/>without<sp/>jumbo<sp/>frames<sp/>is<sp/>1500...<sp/>add<sp/>36<sp/>because??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kMaxPacketSize<sp/>1536</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>kImageBufferAllocationIncrement<sp/>1000</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">AxisCamera*<sp/>AxisCamera::m_instance<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>\brief<sp/>AxisCamera<sp/>constructor</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">AxisCamera::AxisCamera(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ipAddress)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>AxisCameraParams(ipAddress)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_cameraSocket<sp/>(0)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_protectedImageBuffer(NULL)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_protectedImageBufferLength<sp/>(0)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_protectedImageSize<sp/>(0)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_protectedImageSem<sp/>(NULL)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_freshImage<sp/>(false)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_imageStreamTask(</highlight><highlight class="stringliteral">&quot;cameraTask&quot;</highlight><highlight class="normal">,<sp/>(FUNCPTR)s_ImageStreamTaskFunction)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_protectedImageSem<sp/>=<sp/>semMCreate(SEM_Q_PRIORITY<sp/>|<sp/>SEM_INVERSION_SAFE<sp/>|<sp/>SEM_DELETE_SAFE);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_imageStreamTask.Start((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>\brief<sp/>Destructor</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">AxisCamera::~AxisCamera()</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_imageStreamTask.Stop();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(m_cameraSocket);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemSet_t::iterator<sp/>it<sp/>=<sp/>m_newImageSemSet.begin();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemSet_t::iterator<sp/>end<sp/>=<sp/>m_newImageSemSet.end();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;it<sp/>!=<sp/>end;<sp/>it++)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semDelete(*it);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_newImageSemSet.clear();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semDelete(m_protectedImageSem);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_instance<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>\brief<sp/>Get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>AxisCamera<sp/>object,<sp/>if<sp/>the<sp/>object<sp/>does<sp/>not<sp/>exist,<sp/>create<sp/>it</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>\return<sp/>reference<sp/>to<sp/>AxisCamera<sp/>object</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">AxisCamera&amp;<sp/>AxisCamera::GetInstance()</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>m_instance)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>this<sp/>is<sp/>a<sp/>singleton<sp/>for<sp/>now,<sp/>just<sp/>use<sp/>the<sp/>default<sp/>IP<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AxisCamera();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Keep<sp/>track<sp/>of<sp/>this<sp/>so<sp/>it<sp/>can<sp/>be<sp/>shut<sp/>down!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PCVideoServer();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_instance;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>\brief<sp/>Called<sp/>by<sp/>Java<sp/>to<sp/>delete<sp/>the<sp/>camera...<sp/>how<sp/>thoughtful</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCamera::DeleteInstance()</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_instance;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>\brief<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>latest<sp/>image<sp/>from<sp/>the<sp/>camera<sp/>has<sp/>not<sp/>been<sp/>retrieved<sp/>by<sp/>calling<sp/>GetImage()<sp/>yet.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>\return<sp/>true<sp/>if<sp/>the<sp/>image<sp/>has<sp/>not<sp/>been<sp/>retrieved<sp/>yet.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AxisCamera::IsFreshImage()</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_freshImage;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>\brief<sp/>Get<sp/>the<sp/>semaphore<sp/>to<sp/>be<sp/>used<sp/>to<sp/>synchronize<sp/>image<sp/>access<sp/>with<sp/>camera<sp/>acquisition</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>\details<sp/>Call<sp/>semTake<sp/>on<sp/>the<sp/>returned<sp/>semaphore<sp/>to<sp/>block<sp/>until<sp/>a<sp/>new<sp/>image<sp/>is<sp/>acquired.<sp/>The<sp/>semaphore<sp/>is<sp/>owned<sp/>by<sp/>the<sp/>AxisCamera<sp/>class<sp/>and<sp/>will<sp/>be<sp/>deleted<sp/>when<sp/>the<sp/>class<sp/>is<sp/>destroyed.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>\return<sp/>A<sp/>semaphore<sp/>to<sp/>notify<sp/>when<sp/>new<sp/>image<sp/>is<sp/>received</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">SEM_ID<sp/>AxisCamera::GetNewImageSem()</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEM_ID<sp/>sem<sp/>=<sp/>semBCreate<sp/>(SEM_Q_PRIORITY,<sp/>SEM_EMPTY);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_newImageSemSet.insert(sem);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sem;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>\brief<sp/>Get<sp/>an<sp/>image<sp/>from<sp/>the<sp/>camera<sp/>and<sp/>store<sp/>it<sp/>in<sp/>the<sp/>provided<sp/>image.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>\param<sp/>image<sp/>The<sp/>imaq<sp/>image<sp/>to<sp/>store<sp/>the<sp/>result<sp/>in.<sp/>This<sp/>must<sp/>be<sp/>an<sp/>HSL<sp/>or<sp/>RGB<sp/>image</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>\details<sp/>This<sp/>function<sp/>is<sp/>called<sp/>by<sp/>Java.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>\return<sp/>1<sp/>upon<sp/>success,<sp/>zero<sp/>on<sp/>a<sp/>failure</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCamera::GetImage(Image*<sp/>imaqImage)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_protectedImageBuffer<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Synchronized<sp/>sync(m_protectedImageSem);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Priv_ReadJPEGString_C(imaqImage,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)m_protectedImageBuffer,<sp/>m_protectedImageSize);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_freshImage<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>\brief<sp/>Get<sp/>an<sp/>image<sp/>from<sp/>the<sp/>camera<sp/>and<sp/>store<sp/>it<sp/>in<sp/>the<sp/>provided<sp/>image.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>\param<sp/>image<sp/>The<sp/>image<sp/>to<sp/>store<sp/>the<sp/>result<sp/>in.<sp/>This<sp/>must<sp/>be<sp/>an<sp/>HSL<sp/>or<sp/>RGB<sp/>image</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>\return<sp/>1<sp/>upon<sp/>success,<sp/>zero<sp/>on<sp/>a<sp/>failure</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCamera::GetImage(ColorImage*<sp/>image)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetImage(image-&gt;GetImaqImage());</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>\brief<sp/>Instantiate<sp/>a<sp/>new<sp/>image<sp/>object<sp/>and<sp/>fill<sp/>it<sp/>with<sp/>the<sp/>latest<sp/>image<sp/>from<sp/>the<sp/>camera.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>\details<sp/>The<sp/>returned<sp/>pointer<sp/>is<sp/>owned<sp/>by<sp/>the<sp/>caller<sp/>and<sp/>is<sp/>their<sp/>responsibility<sp/>to<sp/>delete.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>\return<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>HSLImage<sp/>object</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">HSLImage*<sp/>AxisCamera::GetImage()</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HSLImage<sp/>*image<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>HSLImage();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetImage(image);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>\brief<sp/>Copy<sp/>an<sp/>image<sp/>into<sp/>an<sp/>existing<sp/>buffer.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>\details<sp/>This<sp/>copies<sp/>an<sp/>image<sp/>into<sp/>an<sp/>existing<sp/>buffer<sp/>rather<sp/>than<sp/>creating<sp/>a<sp/>new<sp/>image<sp/>in<sp/>memory.<sp/>That<sp/>way<sp/>a<sp/>new<sp/>image<sp/>is<sp/>only<sp/>allocated<sp/>when<sp/>the<sp/>image<sp/>being<sp/>copied<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>destination.<sp/>This<sp/>method<sp/>is<sp/>called<sp/>by<sp/>the<sp/>PCVideoServer<sp/>class.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>\param<sp/>imageData<sp/>The<sp/>destination<sp/>image.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>\param<sp/>numBytes<sp/>The<sp/>size<sp/>of<sp/>the<sp/>destination<sp/>image.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>\return<sp/>0<sp/>if<sp/>failed<sp/>(no<sp/>source<sp/>image<sp/>or<sp/>no<sp/>memory),<sp/>1<sp/>if<sp/>success.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCamera::CopyJPEG(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**destImage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;destImageSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;destImageBufferSize)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Synchronized<sp/>sync(m_protectedImageSem);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpi_assert(destImage<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_protectedImageBuffer<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>source<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destImageBufferSize<sp/>&lt;<sp/>m_protectedImageSize)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>current<sp/>destination<sp/>buffer<sp/>too<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*destImage<sp/>!=<sp/>NULL)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>*destImage;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destImageBufferSize<sp/>=<sp/>m_protectedImageSize<sp/>+<sp/>kImageBufferAllocationIncrement;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*destImage<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[destImageBufferSize];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*destImage<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>this<sp/>image<sp/>into<sp/>destination<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpi_assert(*destImage<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpi_assert(m_protectedImageBuffer<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpi_assert(m_protectedImageSize<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Is<sp/>this<sp/>copy<sp/>realy<sp/>necessary...<sp/>perhaps<sp/>we<sp/>can<sp/>simply<sp/>transmit<sp/>while<sp/>holding<sp/>the<sp/>protected<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(*destImage,<sp/>m_protectedImageBuffer,<sp/>m_protectedImageSize);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destImageSize<sp/>=<sp/>m_protectedImageSize;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>\brief<sp/>Static<sp/>interface<sp/>that<sp/>will<sp/>cause<sp/>an<sp/>instantiation<sp/>if<sp/>necessary.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>\details<sp/>This<sp/>static<sp/>stub<sp/>is<sp/>directly<sp/>spawned<sp/>as<sp/>a<sp/>task<sp/>to<sp/>read<sp/>images<sp/>from<sp/>the<sp/>camera.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCamera::s_ImageStreamTaskFunction(AxisCamera<sp/>*thisPtr)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thisPtr-&gt;ImageStreamTaskFunction();</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>\brief<sp/>Task<sp/>spawned<sp/>by<sp/>AxisCamera<sp/>constructor<sp/>to<sp/>receive<sp/>images<sp/>from<sp/>cam</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>\details<sp/>If<sp/>setNewImageSem<sp/>has<sp/>been<sp/>called,<sp/>this<sp/>function<sp/>does<sp/>a<sp/>semGive<sp/>on<sp/>each<sp/>new<sp/>image.<sp/><sp/>Images<sp/>can<sp/>be<sp/>accessed<sp/>by<sp/>calling<sp/>getImage().</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCamera::ImageStreamTaskFunction()</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>on<sp/>trying<sp/>to<sp/>setup<sp/>the<sp/>camera<sp/>connection.<sp/>This<sp/>happens<sp/>in<sp/>a<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>so<sp/>it<sp/>shouldn&apos;t<sp/>effect<sp/>the<sp/>operation<sp/>of<sp/>user<sp/>programs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>requestString<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GET<sp/>/mjpg/video.mjpg<sp/>HTTP/1.1\n\</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral">User-Agent:<sp/>HTTPStreamClient\n\</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral">Connection:<sp/>Keep-Alive\n\</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral">Cache-Control:<sp/>no-cache\n\</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral">Authorization:<sp/>Basic<sp/>RlJDOkZSQw==\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semTake(m_socketPossessionSem,<sp/>WAIT_FOREVER);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cameraSocket<sp/>=<sp/>CreateCameraSocket(requestString);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cameraSocket<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>hammer<sp/>the<sp/>camera<sp/>if<sp/>it<sp/>isn&apos;t<sp/>ready.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semGive(m_socketPossessionSem);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskDelay(1000);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadImagesFromCamera();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>\brief<sp/>This<sp/>function<sp/>actually<sp/>reads<sp/>the<sp/>images<sp/>from<sp/>the<sp/>camera.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCamera::ReadImagesFromCamera()</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*imgBuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgBufferLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Infinite<sp/>loop,<sp/>task<sp/>deletion<sp/>handled<sp/>by<sp/>taskDeleteHook</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Socket<sp/>cleanup<sp/>handled<sp/>by<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>these<sp/>recv<sp/>calls<sp/>must<sp/>be<sp/>non-blocking.<sp/>Otherwise<sp/>if<sp/>the<sp/>camera</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fails<sp/>during<sp/>a<sp/>read,<sp/>the<sp/>code<sp/>hangs<sp/>and<sp/>never<sp/>retries<sp/>when<sp/>the<sp/>camera<sp/>comes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>initialReadBuffer[kMaxPacketSize]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>intermediateBuffer[1];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trailingPtr<sp/>=<sp/>initialReadBuffer;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trailingCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>fix<sp/>me...<sp/>this<sp/>cannot<sp/>be<sp/>the<sp/>most<sp/>efficient<sp/>way<sp/>to<sp/>approach<sp/>this,<sp/>reading<sp/>one<sp/>byte<sp/>at<sp/>a<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(recv(m_cameraSocket,<sp/>intermediateBuffer,<sp/>1,<sp/>0)<sp/>==<sp/>ERROR)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;AxisCamera:<sp/>Failed<sp/>to<sp/>read<sp/>image<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close<sp/>(m_cameraSocket);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ERROR);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncat(initialReadBuffer,<sp/>intermediateBuffer,<sp/>1);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trailingCounter<sp/>ensures<sp/>that<sp/>we<sp/>start<sp/>looking<sp/>for<sp/>the<sp/>4<sp/>byte<sp/>string<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>at<sp/>least<sp/>4<sp/>bytes<sp/>total.<sp/>Kind<sp/>of<sp/>obscure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>2<sp/>blank<sp/>lines<sp/>(\r\n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>strstr(trailingPtr,<sp/></highlight><highlight class="stringliteral">&quot;\r\n\r\n&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--counter;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++trailingCounter<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trailingPtr++;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*contentLength<sp/>=<sp/>strstr(initialReadBuffer,<sp/></highlight><highlight class="stringliteral">&quot;Content-Length:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contentLength<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;AxisCamera:<sp/>No<sp/>content-length<sp/>token<sp/>found<sp/>in<sp/>packet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(m_cameraSocket);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ERROR);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contentLength<sp/>=<sp/>contentLength<sp/>+<sp/>16;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>past<sp/>&quot;content<sp/>length&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readLength<sp/>=<sp/>atol(contentLength);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>image<sp/>byte<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>buffer<sp/>is<sp/>large<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgBufferLength<sp/>&lt;<sp/>readLength)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgBuffer)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>imgBuffer;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgBufferLength<sp/>=<sp/>readLength<sp/>+<sp/>kImageBufferAllocationIncrement;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[imgBufferLength];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgBuffer<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgBufferLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>image<sp/>data<sp/>for<sp/>&quot;Content-Length&quot;<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytesRead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining<sp/>=<sp/>readLength;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bytesRead<sp/>&lt;<sp/>readLength)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytesThisRecv<sp/>=<sp/>recv(m_cameraSocket,<sp/>&amp;imgBuffer[bytesRead],<sp/>remaining,<sp/>0);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytesRead<sp/>+=<sp/>bytesThisRecv;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining<sp/>-=<sp/>bytesThisRecv;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdatePublicImageFromCamera(imgBuffer,<sp/>readLength);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(semTake(m_paramChangedSem,<sp/>NO_WAIT)<sp/>==<sp/>OK)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>params<sp/>need<sp/>to<sp/>be<sp/>updated:<sp/>close<sp/>the<sp/>video<sp/>stream;<sp/>release<sp/>the<sp/>camera.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(m_cameraSocket);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semGive(m_socketPossessionSem);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>\brief<sp/>Copy<sp/>the<sp/>image<sp/>from<sp/>private<sp/>buffer<sp/>to<sp/>shared<sp/>buffer.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>\param<sp/>imgBuffer<sp/>The<sp/>buffer<sp/>containing<sp/>the<sp/>image</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>\param<sp/>bufLength<sp/>The<sp/>length<sp/>of<sp/>the<sp/>image</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCamera::UpdatePublicImageFromCamera(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*imgBuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgSize)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Synchronized<sp/>sync(m_protectedImageSem);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>buffer<sp/>size<sp/>if<sp/>current<sp/>destination<sp/>buffer<sp/>is<sp/>too<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_protectedImageBufferLength<sp/>&lt;<sp/>imgSize)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_protectedImageBuffer<sp/>!=<sp/>NULL)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>m_protectedImageBuffer;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_protectedImageBufferLength<sp/>=<sp/>imgSize<sp/>+<sp/>kImageBufferAllocationIncrement;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_protectedImageBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[m_protectedImageBufferLength];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_protectedImageBuffer<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_protectedImageBufferLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(m_protectedImageBuffer,<sp/>imgBuffer,<sp/>imgSize);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_protectedImageSize<sp/>=<sp/>imgSize;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_freshImage<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>everyone<sp/>who<sp/>is<sp/>interested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemSet_t::iterator<sp/>it<sp/>=<sp/>m_newImageSemSet.begin();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemSet_t::iterator<sp/>end<sp/>=<sp/>m_newImageSemSet.end();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;it<sp/>!=<sp/>end;<sp/>it++)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semGive(*it);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>\brief<sp/>Implement<sp/>the<sp/>pure<sp/>virtual<sp/>interface<sp/>so<sp/>that<sp/>when<sp/>parameter<sp/>changes<sp/>require<sp/>a<sp/>restart,<sp/>the<sp/>image<sp/>task<sp/>can<sp/>be<sp/>bounced.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCamera::RestartCameraTask()</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_imageStreamTask.Stop();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_imageStreamTask.Start((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>bindings<sp/>used<sp/>by<sp/>Java</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>need<sp/>to<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraStart()</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance();</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCameraGetImage<sp/>(Image*<sp/>image)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetImage(image);</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteBrightness(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>brightness)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteBrightness(brightness);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCameraGetBrightness()</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetBrightness();</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteWhiteBalance(AxisCameraParams::WhiteBalance_t<sp/>whiteBalance)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteWhiteBalance(whiteBalance);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">AxisCameraParams::WhiteBalance_t<sp/>AxisCameraGetWhiteBalance()</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetWhiteBalance();</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteColorLevel(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorLevel)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteColorLevel(colorLevel);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCameraGetColorLevel()</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetColorLevel();</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteExposureControl(AxisCameraParams::Exposure_t<sp/>exposure)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteExposureControl(exposure);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">AxisCameraParams::Exposure_t<sp/>AxisCameraGetExposureControl()</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetExposureControl();</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteExposurePriority(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exposure)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteExposurePriority(exposure);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCameraGetExposurePriority()</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetExposurePriority();</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteMaxFPS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxFPS)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteMaxFPS(maxFPS);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCameraGetMaxFPS()</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetMaxFPS();</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteResolution(AxisCameraParams::Resolution_t<sp/>resolution)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteResolution(resolution);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">AxisCameraParams::Resolution_t<sp/>AxisCameraGetResolution()</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetResolution();</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteCompression(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compression)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteCompression(compression);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCameraGetCompression()</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetCompression();</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraWriteRotation(AxisCameraParams::Rotation_t<sp/>rotation)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().WriteRotation(rotation);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">AxisCameraParams::Rotation_t<sp/>AxisCameraGetRotation()</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().GetRotation();</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AxisCameraDeleteInstance()</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisCamera::GetInstance().DeleteInstance();</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>binding<sp/>used<sp/>by<sp/>Java;<sp/>must<sp/>stay<sp/>as<sp/>is<sp/>or<sp/>Java<sp/>has<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AxisCameraFreshImage()</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AxisCamera::GetInstance().IsFreshImage();</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/AxisCamera.cpp"/>
  </compounddef>
</doxygen>
