/*
 *  Drive.cpp
 *  
 *
 *  Created by Matthew Haney on 2/13/11.
 *  Copyright 2011 Regis Jesuit High School. All rights reserved.
 *	AMDG
 *
 */

#include "Drive.h"

RJFRC2011::Drive::Drive()
{
	// Create a robot using standard left/right robot drive on PWMS 1, 2, 3, and #4
	this->_drive = new RobotDrive(DRIVE_FRONT_LEFT_JAGUAR_PORT, DRIVE_FRONT_RIGHT_JAGUAR_PORT, DRIVE_BACK_LEFT_JAGUAR_PORT, DRIVE_BACK_RIGHT_JAGUAR_PORT);
	this->_speed_prev = this->_turn_prev = 0;
}

void RJFRC2011::Drive::drive(float speed, float turn)
{
	// ramp speed and turn
	turn = ramp(turn, _turn_prev);
	speed = ramp(speed, _speed_prev);
	_drive->Drive(speed, turn);
	_speed_prev = speed;
	_turn_prev = turn;
}

//! A function that "ramps" input from a joystick to motors so that an overzealous driver doesn't tear up the chassis
/*!
 \param desired_output The output that the operator is trying to send
 \param current_output The current output
 \param increment The amount by which to increment ramping.  Defaults to .005
 \return the ramped value
 \author Drew Lazzeri
 */
float RJFRC2011::Drive::ramp(float desired_output, float current_output)
{
	float increment = .1;
	if (desired_output  <= .1 && desired_output >= -.1);
	    increment = .05;
	if (desired_output < current_output)
	{
		return current_output - increment;//(desired_output * increment);
	}    
	else if (desired_output > current_output)
	{    
		return /*(desired_output * increment)*/increment + current_output;
	}
	else
	{
		return current_output;
	}
}
