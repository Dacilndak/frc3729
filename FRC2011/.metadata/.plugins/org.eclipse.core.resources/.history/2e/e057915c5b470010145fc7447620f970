/*!
 \file Controller.cpp
 \brief File containing implementations of functions found in the \a Controller class (found in Controller.h)
 \authors Matthew Haney, Drew Lazzeri
 
 */

#include "Controller.h"
#include "WPILib.h"
#include "macros.h"

using namespace RJFRC2011;

/*
 \brief Constructor.
 \details Basically, initialize the controller, which for whatever reason WPILib thinks is a joystick.
 */
RJFRC2011::Controller::Controller()
{
	this->_controller = new Joystick(1);
	this->_joystick = new Joystick(2);
}

/*
 \brief Destructor.
 \details Yup.
 */
RJFRC2011::Controller::~Controller()
{
	delete _controller;
	delete _joystick;
}

/*
 \brief Get user-requested manipulator elevation.
 \details Reads input from the x-axis on the left stick, normalizes it to a value between -1.0 and 1.0, and then exponentiates it (so the stick's less sensitive in the center and more sensitive at the edges).
 \return The received, normalized, and expo-ed value.
 */
float RJFRC2011::Controller::getManipulatorElevation()
{
	// Y-axis left; manipulator elevation controls
	//return normalize(this->_controller->GetZ(), ZMIN, ZMAX) * -1.0;
	return this->_joystick->GetY() * -1.0;
}

/*
 \brief Get user-requested drive speed.
 \details Reads input from the y-axis on the right stick, normalizes it to a value between -1.0 and 1.0, and then exponentiates it (so the stick's less sensitive in the center and more sensitive at the edges).
 \return The received, normalized, and expo-ed value.
 */
float RJFRC2011::Controller::getDriveSpeed()
{
	// Y-axis right; speed
	return expo(normalize(this->_controller->GetY(), YMIN, YMAX) * -1.0, YEXPO);
}

/*
 \brief Get user-requested drive turn speed.
 \details Reads input from the x-axis on the right stick, normalizes it to a value between -1.0 and 1.0, and then exponentiates it (so the stick's less sensitive in the center and more sensitive at the edges).
 \return The received, normalized, and expo-ed value.
 */
float RJFRC2011::Controller::getDriveTurn()
{
	// X-axis right; turn
	return expo(normalize(this->_controller->GetX(), XMIN, XMAX), XEXPO);
}

/*
 \brief Get user-requested manipulator action (input and rotate or eject).
 \details Reads input from the y-axis on the left stick, normalizes it to a value between -1.0 and 1.0, and then exponentiates it (so the stick's less sensitive in the center and more sensitive at the edges).
 \return The received, normalized, and expo-ed value.
 */
char RJFRC2011::Controller::getManipulatorAction()
{
	// X-axis left; manipulator receive/eject controls
	//return normalize(this->_controller->GetRawAxis(5), ROTMIN, ROTMAX);
	if (this->_joystick->GetRawButton(3) == 1 && this->_joystick->GetRawButton(1) == 1)
		return 'n';
	else if (this->_joystick->GetRawButton(3) == 1)
		return 'i';
	else if (this->_joystick->GetRawButton(1) == 1)
		return 'o';
	else
		return 'n';
}

/*
 \brief Get user-requested minibot shelf action (in/out).
 \details Reads input from the two trigger switches on the top of the controller, does a bit of manipulation, and returns an integer with the value of the right and left switches (respectively) stored in the last two bits (0 being off, 1 being on).
 \return An integer with the last two bits being the right and left switch inputs, respectively.
 */
int RJFRC2011::Controller::getMinibotSwitches()
{
	// Right trigger switch; minibot shelf out
	int rightSwitch = this->_controller->GetRawButton(2);
	// Left trigger switch; minibot shelf in
	int leftSwitch = this->_controller->GetRawButton(1);
	int switches = 0;
	// First bit is right switch value
	switches |= (rightSwitch << 0);
	// Second bit is left switch value
	switches |= (leftSwitch << 1);
	return switches;
}

/*!
 \brief A function that "normalizes" inputs from the joysticks (because they don't give perfect -1.0 to 1.0 values).
 \details If the requested value is negative, return its percentage of the minimum possible value; if it's possible, do the same with the max.  If it's zero, of course, return zero.
 \param joyVal the input from the joystick
 \param min the minimun joystick value
 \param max the maximum joystick value
 \return the normalized value
 \author Adam Bryant
 */
float RJFRC2011::Controller::normalize(float joyVal, float min, float max)
{
	float retVal = 0.0;
	
	if (joyVal < 0.0)
		retVal = abs(joyVal) / min;
	else if (joyVal > 0.0)
		retVal = abs(joyVal) / max;
	if (retVal < -1.0)
		retVal = -1.0;
	else if (retVal > 1.0)
		retVal = 1.0;
	
	return retVal;
}

/*!
 \brief An exponential function used to make joysticks less sensitive near the center and more sensitive towards the edges.
 \details Basically, plug the value requested by the user and a predefined constant into an exponential equation and return the result.
 \param x the value to be exponentiated
 \param a a predefined exponential factor
 \return the "expo-ed" value
 \author Adam Bryant
 */
float RJFRC2011::Controller::expo(float x, float a)
{
	return (a * (x * x * x) + (1 - a) * x);
}

/*!
 \brief Absolute value of a float, since I'm not sure if we can import the <cmath> library onto the cRIO.
 \param initial the initial value
 \return the absolute value of the passed value; if it's negative, make it positive
 \author Matthew Haney
 */
float RJFRC2011::Controller::abs(float initial)
{
	if (initial < 0)
		return (initial * -1.0);
	else if (initial > 0)
		return initial;
	else 
		return 0.0;
}
