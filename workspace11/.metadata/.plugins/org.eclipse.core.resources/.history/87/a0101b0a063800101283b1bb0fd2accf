/*!
 \file BuiltinDefaultCode.cpp
 \brief The file containing the class BuiltinDefaultCode.  We didn't bother changing the name...
 
 The main source code file for Regis Jesuit High School FRC Team #3729.
 
 */

#include "macros.h"
#include "WPILib.h"
#include "Autonomous.h"
#include "Teleoperated.h"
#include "Controller.h"
using namespace RJFRC2011;

/*!
 \class BuiltinDefaultCode : public IterativeRobot
 \brief Our big class that does everything.  We didn't bother renaming it.
 
 BuiltinDefaultCode is technically the name of the example class that we first opened, but once we started coding we realized that we couldn't rename the rpoject and didn't want to reconfigure all the build settings from scratch.  So here we are.
 
 */
class BuiltinDefaultCode : public IterativeRobot
{
private:
	// Class abstracting drive system
	Drive * drive;
	// Class abstracting manipulator
	Manipulator * manipulator;
	// Class abstracting the controller
	Controller *controller;
	
	// Driver Station object; used so we can send inf oback to the user (at least, in theory)
	DriverStation * ds;
	
	// The minibot shelf relay.  MOVE TO TELEOP WHEN READY.
	Relay * minibotShelf;
	
	// State machine variables
	Autonomous * auto_machine;
	Teleoperated * teleop_machine;
	
public:
	/*!
	 \brief Constructor.
	 \details Set up things before robot does anything; mostly this allocates memory for things.
	 */
	BuiltinDefaultCode(void)
	{
		// Set up relays
		minibotShelf = new Relay(MINIBOT_SHELF_RELAY_PORT, Relay::kBothDirections);
		
		drive = new Drive();
		manipulator = new Manipulator();
		controller = new Controller();
		
		// Set up state machines
		auto_machine = new Autonomous(drive, manipulator, controller);
		teleop_machine = new Teleoperated(drive, manipulator, controller);
		
		// Acquire the Driver Station object
		ds = DriverStation::GetInstance();
	}
	
	//! Destructor.  Called when a class object expires.  Used so we don't waste memory.
	~BuiltinDefaultCode()
	{
		delete auto_machine;
		delete teleop_machine;
		delete drive;
		delete controller;
		delete minibotShelf;
	}
	
	/********************************** Init Routines *************************************/
	
	//! Actions which would be performed once (and only once) upon initialization of the robot.
	void RobotInit(void)
	{
		GetWatchdog().SetExpiration(DEFAULT_WATCHDOG_TIME);
		// Actions which would be performed once (and only once) upon initialization of the
		// robot would be put here.
	}
	
	//! Code called at the beginning of Disabled Mode.
	void DisabledInit(void)
	{
		GetWatchdog().Feed();
	}
	
	//! Code called at the beginning of Autonomous Mode.
	void AutonomousInit(void)
	{
		GetWatchdog().Feed();
		auto_machine->setState(0);
	}
	
	//! Code called at the beginning of Teleoperated Mode.
	void TeleopInit(void)
	{
		GetWatchdog().Feed();
		teleop_machine->setState(0);
	}
	
	/********************************** Periodic Routines *************************************/
	
	//! The code called in a loop during Disabled Mode.  Left as the default, minus the loop counter.
	void DisabledPeriodic(void)
	{
		GetWatchdog().Feed();
		// Basically, sit idle and keep the watchdog running.
	}
	
	//! The code called in a loop during Autonomous Mode.
	void AutonomousPeriodic(void)
	{
		GetWatchdog().Feed();
		auto_machine->Go();
		auto_machine->Next();
	}
	
	//! The code called in a loop during Teleoperated Mode.
	void TeleopPeriodic(void)
	{
		GetWatchdog().Feed();
		teleop_machine->Go();
		teleop_machine->Next();
		Wait(0.1);
	}
};

START_ROBOT_CLASS(BuiltinDefaultCode);
