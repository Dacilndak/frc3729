<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.3">
  <compounddef id="class_r_j_f_r_c2011_1_1_controller" kind="class" prot="public">
    <compoundname>RJFRC2011::Controller</compoundname>
    <includes refid="_controller_8h" local="no">Controller.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_r_j_f_r_c2011_1_1_controller_1a1bf8f7e3572acfdb119213a9473bdf9c" prot="private" static="no" mutable="no">
        <type>Joystick *</type>
        <definition>Joystick* _controller</definition>
        <argsstring></argsstring>
        <name>_controller</name>
        <briefdescription>
<para>Object abstracting our InterLink Elite controller, which WIPLib seems to think is a joystick. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="42" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_r_j_f_r_c2011_1_1_controller_1a4b691efdfa18f448356d3cc9dc719498" prot="private" static="no" mutable="no">
        <type>Joystick *</type>
        <definition>Joystick* _joystick</definition>
        <argsstring></argsstring>
        <name>_joystick</name>
        <briefdescription>
<para>Object abstracting our legitimate Logitech Attack3 joystick. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="44" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1a5afdd5e6ca5ce84de229dfd3f1f20f43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float abs</definition>
        <argsstring>(float initial)</argsstring>
        <name>abs</name>
        <param>
          <type>float</type>
          <declname>initial</declname>
        </param>
        <briefdescription>
<para>Absolute value of a float, since I&apos;m not sure if we can import the &lt;cmath&gt; library onto the cRIO. EDIT: turns out we can, but I&apos;ll leave this here to conserve memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the absolute value of the passed value; if it&apos;s negative, make it positive </para></simplesect>
<simplesect kind="author"><para>Matthew Haney </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="45" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="166" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1a96652cffa4dd595c766b97993bc25fa9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float expo</definition>
        <argsstring>(float x, float a)</argsstring>
        <name>expo</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>An exponential function used to make joysticks less sensitive near the center and more sensitive towards the edges. </para>        </briefdescription>
        <detaileddescription>
<para>Basically, plug the value requested by the user and a predefined constant into an exponential equation and return the result. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to be exponentiated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a predefined exponential factor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the &quot;expo-ed&quot; value </para></simplesect>
<simplesect kind="author"><para>Adam Bryant </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="46" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1a5638797bbf5fc78741487113ab2eb880" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float normalize</definition>
        <argsstring>(float joyVal, float min, float max)</argsstring>
        <name>normalize</name>
        <param>
          <type>float</type>
          <declname>joyVal</declname>
        </param>
        <param>
          <type>float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>A function that &quot;normalizes&quot; inputs from the joysticks (because they don&apos;t give perfect -1.0 to 1.0 values). </para>        </briefdescription>
        <detaileddescription>
<para>If the requested value is negative, return its percentage of the minimum possible value; if it&apos;s possible, do the same with the max. If it&apos;s zero, of course, return zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joyVal</parametername>
</parameternamelist>
<parameterdescription>
<para>the input from the joystick </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimun joystick value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum joystick value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the normalized value </para></simplesect>
<simplesect kind="author"><para>Adam Bryant </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="47" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="133" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1aeee02f1e6f84f42452208c1bf0bb62cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Controller</definition>
        <argsstring>()</argsstring>
        <name>Controller</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Basically, initialize the controllers to USB ports 1 and 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="49" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1a7c5e0bfebaa8d00a48ef8ce35aeadf56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~Controller</definition>
        <argsstring>()</argsstring>
        <name>~Controller</name>
        <briefdescription>
<para>Destructor. Kill stuff. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="50" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1a025f6f4702d475f523a8239ea8cff076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getManipulatorElevation</definition>
        <argsstring>()</argsstring>
        <name>getManipulatorElevation</name>
        <briefdescription>
<para>Get user-requested manipulator elevation. </para>        </briefdescription>
        <detaileddescription>
<para>Reads input from the y-axis on the joystick. <simplesect kind="return"><para>The received value (inverted). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="51" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1a9e1ef21d8c2d20194637bba06d853136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getDriveSpeed</definition>
        <argsstring>()</argsstring>
        <name>getDriveSpeed</name>
        <briefdescription>
<para>Get user-requested drive speed. </para>        </briefdescription>
        <detaileddescription>
<para>Reads input from the y-axis on the right stick, normalizes it to a value between -1.0 and 1.0, and then exponentiates it (so the stick&apos;s less sensitive in the center and more sensitive at the edges). <simplesect kind="return"><para>The received, normalized, and expo-ed value (inverted [if the inversion switch {button #2} is thrown]). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="52" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1a6e215bd860fb57ba8b0e6e0e27f45e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getDriveTurn</definition>
        <argsstring>()</argsstring>
        <name>getDriveTurn</name>
        <briefdescription>
<para>Get user-requested drive turn speed. </para>        </briefdescription>
        <detaileddescription>
<para>Reads input from the x-axis on the right stick, normalizes it to a value between -1.0 and 1.0, and then exponentiates it (so the stick&apos;s less sensitive in the center and more sensitive at the edges). <simplesect kind="return"><para>The received, normalized, and expo-ed value(inverted [if the inversion switch {button #2} is thrown]). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="53" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1af8731521c77fc853967b7f02f99cd4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getMinibotSwitches</definition>
        <argsstring>()</argsstring>
        <name>getMinibotSwitches</name>
        <briefdescription>
<para>Get user-requested minibot shelf action (in/out). </para>        </briefdescription>
        <detaileddescription>
<para>Read input from two thumb buttons on the joystick (buttons 4 and 5) and return ther states in a single variable. <simplesect kind="return"><para>An integer with the last two bits being the right and left button inputs, respectively. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="55" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="114" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_r_j_f_r_c2011_1_1_controller_1ad5503e733654faae028e022fdedca417" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>getManipulatorAction</definition>
        <argsstring>()</argsstring>
        <name>getManipulatorAction</name>
        <briefdescription>
<para>Get user-requested manipulator action (input, rotate, or eject). </para>        </briefdescription>
        <detaileddescription>
<para>Read input from three buttons on the joystick: the trigger (1) and two thumb buttons (2 and 3). If any one of them is pressed, return that button&apos;s ID. If multiple are pressed, or none are pressed, return 0. <simplesect kind="return"><para>The ID of the received button. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="54" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.cpp" bodystart="89" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class abstracting the controller(s) used by our driver(s) </para>    </briefdescription>
    <detaileddescription>
<para>Get input from a pair of joysticks (one of which is physically a flight simulator controller) and return those inputs. A class like this is useful because we can modify a few lines of code to change the inputs for functions throughout the entire code. </para>    </detaileddescription>
    <location file="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" line="39" bodyfile="/Users/matthewhaney/rjfrc/workspace11/BuiltinDefaultCode/Controller.h" bodystart="38" bodyend="56"/>
    <listofallmembers>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a1bf8f7e3572acfdb119213a9473bdf9c" prot="private" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>_controller</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a4b691efdfa18f448356d3cc9dc719498" prot="private" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>_joystick</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a5afdd5e6ca5ce84de229dfd3f1f20f43" prot="private" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>abs</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1aeee02f1e6f84f42452208c1bf0bb62cf" prot="public" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>Controller</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a96652cffa4dd595c766b97993bc25fa9" prot="private" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>expo</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a9e1ef21d8c2d20194637bba06d853136" prot="public" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>getDriveSpeed</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a6e215bd860fb57ba8b0e6e0e27f45e88" prot="public" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>getDriveTurn</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1ad5503e733654faae028e022fdedca417" prot="public" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>getManipulatorAction</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a025f6f4702d475f523a8239ea8cff076" prot="public" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>getManipulatorElevation</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1af8731521c77fc853967b7f02f99cd4f2" prot="public" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>getMinibotSwitches</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a5638797bbf5fc78741487113ab2eb880" prot="private" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>normalize</name></member>
      <member refid="class_r_j_f_r_c2011_1_1_controller_1a7c5e0bfebaa8d00a48ef8ce35aeadf56" prot="public" virt="non-virtual"><scope>RJFRC2011::Controller</scope><name>~Controller</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
