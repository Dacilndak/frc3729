/*!
 \file Drive.cpp
 \brief File containing definitions of functions declared in class \a Drive (declared in Drive.h).
 */

#include "Drive.h"
#include "WPILib.h"
using namespace RJFRC2011;

/*!
 \brief Constructor.
 \details Basically, initialize the drive system.
 */
RJFRC2011::Drive::Drive()
{
	// Create a robot using standard left/right robot drive on PWMS 1, 2, 3, and #4
	this->_drive = new RobotDrive(DRIVE_FRONT_LEFT_JAGUAR_PORT, DRIVE_FRONT_RIGHT_JAGUAR_PORT, DRIVE_BACK_LEFT_JAGUAR_PORT, DRIVE_BACK_RIGHT_JAGUAR_PORT);
	this->_speed_prev = this->_turn_prev = 0;
}

/*!
 \brief Drive the robot, ramping as you go.
 \param speed The user-requested speed
 \param turn The user-requested turn
 */
void RJFRC2011::Drive::drive(float speed, float turn)
{
	// ramp speed and turn
	turn = ramp(turn, _turn_prev);
	speed = ramp(speed, _speed_prev);
	if ((speed <= 0.1 && speed > 0) || (speed >= -0.1 && speed < 0) && turn > 0)
	{
		_drive->TankDrive(-turn / 2, turn / 2);
	}
	else if ((speed <= 0.1 && speed > 0) || (speed >= -0.1 && speed < 0) && turn < 0)
	{
		_drive->TankDrive(turn / 2, -turn / 2);
	}
	else
	{
		_drive->Drive(speed, turn);
	}
	_speed_prev = speed;
	_turn_prev = turn;
}

/*!
 \brief A function that "ramps" input from a joystick to motors so that an overzealous driver doesn't tear up the chassis.
 \details Increase or decrease the sent value gradually based on operator response.  With values close to zero, go even more gradually than normal.
 \param desired_output The output that the operator is trying to send
 \param current_output The current output
 \param increment The amount by which to increment ramping.  Defaults to .005
 \return the ramped value
 \author Drew Lazzeri
 */
float RJFRC2011::Drive::ramp(float desired_output, float current_output)
{
	float increment = .1;
	if (desired_output  <= .1 && desired_output >= -.1);
	increment = .05;
	if (desired_output < current_output)
	{
		return current_output - increment;
	}    
	else if (desired_output > current_output)
	{    
		return increment + current_output;
	}
	else
	{
		return current_output;
	}
}
