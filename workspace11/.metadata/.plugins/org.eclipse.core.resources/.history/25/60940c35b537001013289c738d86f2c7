/*!
 /file Manipulator.cpp
 /brief File containing implementations of functions found in the \a Manipulator class (found in Manipulator.h)
 /authors Matthew Haney, Drew Lazzeri
 
 */


#include "Manipulator.h"
#include "WPILib.h"
#include "macros.h"
using namespace RJFRC2011;

Relay * manipulatorTop;
Relay * manipulatorBottom;
Relay * manipulatorElevation;
DigitalInput * ;
DigitalInput * manipulatorElevationTopLimitSwitch;


RJFRC2011::Manipulator::Manipulator()
{
	manipulatorTop = new Relay(MANIPULATOR_TOP_RELAY_PORT, Relay::kBothDirections);
	manipulatorBottom = new Relay(MANIPULATOR_BOTTOM_RELAY_PORT, Relay::kBothDirections);
	manipulatorElevation = new Relay(MANIPULATOR_ELEVATION_RELAY_PORT, Relay::kBothDirections);
	
	manipulatorElevationBottomLimitSwitch = new DigitalInput(MANIPULATOR_ELEVATION_BOTTOM_LIMIT_SWITCH_PORT);
	manipulatorElevationTopLimitSwitch = new DigitalInput(MANIPULATOR_ELEVATION_TOP_LIMIT_SWITCH_PORT);
}

RJFRC2011::Manipulator::~Manipulator()
{
	delete manipulatorElevationTopLimitSwitch;
	delete manipulatorElevationBottomLimitSwitch;
	delete manipulatorTop;
	delete manipulatorBottom;
	delete manipulatorElevation;
}

void RJFRC2011::Manipulator::inputTube()
{
	manipulatorTop->Set(Relay::kReverse);		// top part backward
	manipulatorBottom->Set(Relay::kReverse);	// bottom part backward
}

void RJFRC2011::Manipulator::rotateTube(float rotateTime)
{
	manipulatorTop->Set(Relay::kForward);		// turn top part forward
	manipulatorBottom->Set(Relay::kReverse);	//turn bottom part backward
	GetWatchdog().Feed();						// this next bit: wait for a little while, but don't trigger the watchdog
	GetWatchdog().SetExpiration(rotateTime + 0.25);				// (normally set to expire @ .75 seconds)
	Wait(rotateTime);
	GetWatchdog().Feed();
	GetWatchdog().SetExpiration(DEFAULT_WATCHDOG_TIME);
	manipulatorBottom->Set(Relay::kOff);		// turn top part off
	manipulatorTop->Set(Relay::kOff);			// turn bottom part off
	ManipulatorDownFlag = false;				// no longer needed
}

void RJFRC2011::Manipulator::ejectTube()
{
	manipulatorTop->Set(Relay::kForward);		// top part forward
	manipulatorBottom->Set(Relay::kForward);	// bottom part forward
}

void RJFRC2011::Manipulator::elevate(float val)
{
	// move shelf up/down with y_r
	// if user wants to go up, and we haven't hit the top limit switch yet, go up
	if (val > 0.35)// && manipulatorElevationTopLimitSwitch->Get() != 1)
	{
		manipulatorElevation->Set(Relay::kForward);
	}
	// if user wants to go down, and we haven't hit the bottom limit switch yet, go down
	else if (val < -0.35)// && manipulatorElevationBottomLimitSwitch->Get() != 1)
	{
		manipulatorElevation->Set(Relay::kReverse);
	}
	// if no response from driver, turn it off
	else
	{
		manipulatorElevation->Set(Relay::kOff);
	}
}

void RJFRC2011::Manipulator::stopManipulatorAction()
{
	manipulatorTop->Set(Relay::kOff);
	manipulatorBottom->Set(Relay::kOff);
}

void RJFRC2011::Manipulator::stopManipulatorElevation()
{
	manipulatorElevation->Set(Relay::kOff);
}
